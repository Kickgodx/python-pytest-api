import pytest
from prometheus_client import Counter, start_http_server

import config as cfg
from src.models.client import Client


@pytest.hookimpl(tryfirst=True)
def pytest_configure(config):
    allure_dir = getattr(config.option, "allure_report_dir", None)
    if not allure_dir: setattr(config.option, "allure_report_dir", cfg.ALLURE_RESULTS_PATH)
    # rootpath = config.rootpath
    setattr(config.option, "attach_capture", False)


@pytest.fixture(scope="session")
def client():
    return Client()


# –ú–µ—Ç—Ä–∏–∫–∏
TEST_COUNTER = Counter('pytest_test_calls_total', 'Number of test calls', ['outcome', 'name'])

# –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
@pytest.hookimpl(tryfirst=True)
def pytest_sessionstart(session):
    print("üöÄ Starting Prometheus metrics server on port 0.0.0.0:8000")
    start_http_server(8000, addr="0.0.0.0")

# –•—É–∫ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ, —É–ø–∞–≤—à–∏–µ –∏ —Ç.–ø.
@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    result = outcome.get_result()
    if result.when == "call":
        TEST_COUNTER.labels(outcome=result.outcome, name=item.name).inc()


def pytest_sessionfinish(session, exitstatus):
    import time
    time.sleep(20)  # –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º